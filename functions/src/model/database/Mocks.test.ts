import {FlightRow, Landing, LatLng, PilotRowFull, Takeoff} from "./model";

function randomBigInt(): number {
    return Math.floor(Math.random() * 100000);
}

function randomDistance(): number {
    return Math.floor(Math.random() * 100000)
}

function randomDuration(): number {
    return Math.floor(Math.random() * 100000)
}


export namespace Mocks {

    const flightFiller: Pick<FlightRow, 'polyline' | 'strava_activity_id' | 'description' | 'distance_meters' | 'landing_id' | 'takeoff_id'> = {
        strava_activity_id: randomBigInt().toString(),
        description: "Some description",
        distance_meters: randomDistance(),
        landing_id: "123",
        takeoff_id: "456",
        polyline: [
            [1, 2], [3, 4]
        ]
    }

    export const userRow1: PilotRowFull = {
        pilot_id: randomBigInt(),
        first_name: "First",
        strava_access_token: "token1",
        strava_refresh_token: "refresh1",
        strava_expires_at: new Date(2050),
    }
    export const userRow2: PilotRowFull = {
        pilot_id: randomBigInt(),
        first_name: "Second",
        strava_access_token: "token2",
        strava_refresh_token: "refresh2",
        strava_expires_at: new Date(2050),
    }
    export const user1activity1wing1: FlightRow = {
        pilot_id: userRow1.pilot_id,
        start_date: new Date(2025, 1),
        wing: "One",
        duration_sec: 5 * 60,
        ...flightFiller,
        strava_activity_id: "14590322465",
        description: "ü™Ç One",
    }
    export const user2activity1wing1: FlightRow = {
        pilot_id: userRow2.pilot_id,
        start_date: new Date(2025, 2),
        wing: "One",
        duration_sec: randomDuration(),
        ...flightFiller,
        description: "Some description",
    }
    export const user1activity2wing2: FlightRow = {
        pilot_id: userRow1.pilot_id,
        start_date: new Date(2025, 3),
        wing: "Two",
        duration_sec: 60 * 60,
        ...flightFiller,
        description: "Some description\nü™Ç Two",
    }
    export const user1activity3wing1: FlightRow = {
        pilot_id: userRow1.pilot_id,
        start_date: new Date(2025, 4),
        wing: "One",
        duration_sec: 10 * 60,
        ...flightFiller,
        description: "Some description\nü™Ç One\nThis wing Xmin over Y flights\nThis year 1h 15min over 3 flights\nAll time 1h 15min over 3 flights\nüåê parastats.info",
    }
    export const user1activity4wing1: FlightRow = {
        pilot_id: userRow1.pilot_id,
        start_date: new Date(2025, 5),
        wing: "One",
        duration_sec: 4 * 60 * 60,
        ...flightFiller
    }
    export const user2activity2wing1: FlightRow = {
        pilot_id: userRow2.pilot_id,
        start_date: new Date(2025, 6),
        wing: "One",
        duration_sec: 4 * 60 * 60,
        ...flightFiller,
    }

    export const home: LatLng = [45.922108, 6.876606]

    export const leBoisDuBouchet: Landing = {
        slug: 'chamonix---le-bois-du-bouchet',
        name: 'CHAMONIX - LE BOIS DU BOUCHET',
        lat: 45.92968,
        lng: 6.87636,
        alt: 1042
    }

    export const leSavoy: Landing = {
        slug: 'chamonix---le-savoy',
        name: 'CHAMONIX - LE SAVOY',
        lat: 45.9278,
        lng: 6.868,
        alt: 1049
    }
    export const planpraz: Takeoff = {
        slug: 'chamonix---plan-praz---brevent',
        name: 'CHAMONIX - PLAN PRAZ - BREVENT',
        lat: 45.9047,
        lng: 6.8831,
        alt: 1917
    }

    export const forclaz: Takeoff = {
        slug: 'col-de-la-forclaz---montmin',
        name: 'COL DE LA FORCLAZ - MONTMIN',
        lat: 45.8142,
        lng: 6.2469,
        alt: 1257
    }

    export const flightRow = {
        "pilot_id": 4142500,
        "strava_activity_id": "14590322465",
        "distance_meters": 6592.9,
        "duration_sec": 768,
        "wing": "Ronin",
        "start_date": new Date("2025-05-25T12:43:44.000Z"),
        "description": "ü™Ç Ronin‚ÄÑ‚ÄÑ27 flights / 3h 35min\n2025‚ÄÑ‚ÄÑ‚ÄÑ‚ÄÑ‚ÄÑ‚ÄÑ  5 flights / 40min\nAll Time‚ÄÑ‚ÄÑ  173 flights / 43h 36min\nüåê parastats.info",
        "landing_id": "chamonix---le-savoy",
        "takeoff_id": "chamonix---plan-de-laiguille",
        "polyline": [[45.69846, 6.2721], [45.69847, 6.27209], [45.69863, 6.27208], [45.6987, 6.27208], [45.69878, 6.27212], [45.69957, 6.27269], [45.69964, 6.27276], [45.69982, 6.27301], [45.70002, 6.27331], [45.70007, 6.27335], [45.70014, 6.27333], [45.7002, 6.27323], [45.7004, 6.27293], [45.70046, 6.27276], [45.70051, 6.27267], [45.70061, 6.27265], [45.70071, 6.27269], [45.70078, 6.27278], [45.70083, 6.2729], [45.70089, 6.27312], [45.70095, 6.27315], [45.70103, 6.27308], [45.70109, 6.27293], [45.70117, 6.27285], [45.70125, 6.27292], [45.70133, 6.27324], [45.70138, 6.27335], [45.70145, 6.27342], [45.70152, 6.27347], [45.70181, 6.27359], [45.70194, 6.27372], [45.702, 6.27374], [45.70208, 6.27376], [45.70221, 6.27381], [45.70244, 6.27383], [45.70252, 6.27385], [45.70274, 6.27401], [45.70294, 6.27411], [45.70314, 6.27418], [45.70375, 6.27451], [45.70382, 6.27457], [45.70415, 6.27483], [45.70436, 6.27504], [45.70455, 6.27525], [45.70469, 6.27538], [45.70519, 6.27572], [45.70555, 6.27606], [45.70581, 6.27624], [45.70626, 6.27666], [45.70666, 6.27696], [45.70673, 6.27703], [45.70689, 6.27728], [45.70695, 6.27735], [45.70719, 6.27752], [45.70763, 6.27792], [45.70788, 6.27821], [45.7082, 6.27871], [45.70842, 6.27893], [45.70854, 6.27913], [45.70878, 6.27945], [45.70913, 6.27984], [45.70955, 6.28042], [45.70974, 6.28061], [45.70985, 6.28076], [45.7099, 6.28102], [45.70994, 6.28113], [45.70999, 6.28123], [45.71015, 6.28147], [45.71038, 6.28208], [45.71047, 6.28223], [45.71064, 6.28256], [45.71092, 6.28296], [45.7112, 6.28437], [45.7112, 6.28447], [45.71115, 6.28453], [45.71106, 6.28453], [45.71096, 6.28442], [45.71093, 6.28418], [45.71094, 6.28399], [45.71137, 6.28386], [45.71145, 6.28408], [45.71151, 6.2843], [45.71151, 6.28447], [45.71162, 6.28507], [45.7118, 6.28639], [45.71181, 6.28682], [45.71175, 6.28865], [45.71167, 6.28946], [45.71164, 6.29035], [45.71156, 6.29097], [45.71151, 6.29207], [45.71145, 6.29258], [45.71143, 6.29313], [45.71114, 6.29563], [45.71109, 6.29588], [45.71101, 6.29612], [45.71079, 6.29671], [45.71058, 6.29719], [45.7104, 6.29767], [45.71001, 6.29866], [45.70975, 6.2992], [45.70958, 6.29951], [45.70947, 6.29974], [45.70926, 6.30005], [45.70916, 6.30026], [45.70904, 6.30045], [45.70878, 6.30081], [45.70868, 6.30099], [45.70851, 6.3012], [45.70819, 6.30166], [45.70784, 6.30209], [45.70715, 6.30317], [45.70691, 6.3036], [45.7067, 6.30389], [45.7064, 6.30426], [45.70578, 6.3049], [45.70551, 6.30511], [45.70514, 6.30543], [45.70468, 6.30588], [45.70452, 6.30598], [45.70432, 6.30607], [45.70422, 6.30617], [45.70419, 6.30632], [45.70425, 6.30646], [45.70438, 6.30649], [45.70448, 6.30647], [45.7044, 6.30648], [45.70435, 6.30628], [45.70415, 6.30614], [45.70408, 6.3063], [45.70402, 6.30649], [45.70394, 6.30662], [45.70378, 6.30697], [45.70371, 6.30709], [45.70356, 6.30726], [45.70328, 6.30743], [45.70317, 6.30748], [45.70297, 6.30755], [45.70232, 6.30784], [45.7016, 6.30803], [45.70124, 6.30809], [45.70114, 6.30808], [45.70072, 6.30789], [45.7006, 6.30785], [45.70049, 6.30784], [45.70039, 6.30792], [45.70035, 6.30808], [45.70038, 6.30823], [45.70047, 6.30829], [45.70056, 6.3083], [45.70058, 6.30775], [45.70043, 6.30765], [45.70032, 6.30768], [45.70024, 6.30787], [45.70021, 6.30813], [45.70033, 6.30808], [45.70041, 6.30792], [45.70037, 6.30772], [45.70027, 6.30768], [45.70023, 6.30793], [45.70031, 6.30805], [45.70059, 6.30795], [45.70024, 6.30773], [45.70016, 6.30787], [45.70017, 6.308], [45.70019, 6.30806], [45.7002, 6.30798], [45.70036, 6.30753], [45.70037, 6.30729], [45.70035, 6.30715], [45.70029, 6.30702], [45.70019, 6.30698], [45.7001, 6.30701], [45.69988, 6.3076], [45.69983, 6.30769], [45.69977, 6.30774], [45.6997, 6.30778], [45.69954, 6.30781], [45.69941, 6.30792], [45.69935, 6.308], [45.69934, 6.30812], [45.69935, 6.30835], [45.69934, 6.30846], [45.69928, 6.30857], [45.69919, 6.30866], [45.69906, 6.30864], [45.69894, 6.30854], [45.69897, 6.30831], [45.69911, 6.30805], [45.69928, 6.30795], [45.69933, 6.30827], [45.6992, 6.30841], [45.69907, 6.30835], [45.69909, 6.30812], [45.69926, 6.3079], [45.69945, 6.30789], [45.69952, 6.30815], [45.69935, 6.30823], [45.69918, 6.30808], [45.69921, 6.30774], [45.69931, 6.30762], [45.69946, 6.3076], [45.69958, 6.30784], [45.6996, 6.30802], [45.69952, 6.30818], [45.69939, 6.30816], [45.69932, 6.30795], [45.69933, 6.30778], [45.69945, 6.30764], [45.6996, 6.30759], [45.69974, 6.30771], [45.69983, 6.30784], [45.7001, 6.3085], [45.70013, 6.30865], [45.7002, 6.30917], [45.70026, 6.30933], [45.70027, 6.30942], [45.70019, 6.30946], [45.70011, 6.30945], [45.70001, 6.30927], [45.69998, 6.30902], [45.70001, 6.3088], [45.7001, 6.30867], [45.7002, 6.3086], [45.7003, 6.30859], [45.70042, 6.30862], [45.70051, 6.30868], [45.70055, 6.3088], [45.70053, 6.30892], [45.70044, 6.30898], [45.70034, 6.30895], [45.70025, 6.3088], [45.70026, 6.30856], [45.70037, 6.30836], [45.70049, 6.30824], [45.7006, 6.3084], [45.70074, 6.30867], [45.70077, 6.30888], [45.70074, 6.30901], [45.70064, 6.30897], [45.70056, 6.30896], [45.70047, 6.3089], [45.70034, 6.30879], [45.70029, 6.3088], [45.70026, 6.30895], [45.7003, 6.30906], [45.70044, 6.30919], [45.70059, 6.30917], [45.7007, 6.30899], [45.70074, 6.30874], [45.70072, 6.30852], [45.70068, 6.3084], [45.70062, 6.30838], [45.70057, 6.30833], [45.70049, 6.30841], [45.70046, 6.30858], [45.70049, 6.30905], [45.70043, 6.30927], [45.7004, 6.30934], [45.70034, 6.30938], [45.70028, 6.30939], [45.70025, 6.30938], [45.7003, 6.30938], [45.70029, 6.30933], [45.70029, 6.30935]]
    }

}